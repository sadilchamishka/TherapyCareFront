{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","supportCategoryList","setSupportCategoryList","supportItemList","setSupportItemList","supportCategory","setSupportCategory","supportItem","setSupportItem","itemDetails","setitemDetails","useEffect","getSupportCategoryList","getSupportItemList","getSupportItemDetails","a","fetch","response","json","data","SupportCategoryName","items","Array","index","SupportItem","map","item","ItemName","text","className","value","onChange","event","target","category","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OA8FeA,MA3Ff,WAAgB,IAAD,EAEyCC,mBAAS,IAFlD,mBAENC,EAFM,KAEeC,EAFf,OAGiCF,mBAAS,IAH1C,mBAGNG,EAHM,KAGWC,EAHX,OAIiCJ,mBAAS,IAJ1C,mBAINK,EAJM,KAIWC,EAJX,OAKyBN,mBAAS,IALlC,mBAKNO,EALM,KAKOC,EALP,OAMyBR,mBAAS,IANlC,mBAMNS,EANM,KAMOC,EANP,KASbC,qBAAU,WACRC,MACA,IAEFD,qBAAU,WACRL,EAAmBL,EAAoB,MACvC,CAACA,IAEHU,qBAAU,WACRE,MACA,CAACR,IAEHM,qBAAU,WACRH,EAAeL,EAAgB,MAC/B,CAACA,IAEHQ,qBAAU,WACRG,MACA,CAACP,IAEH,IAAMK,EAAsB,uCAAG,8BAAAG,EAAA,sEACNC,MAAM,yDADA,cACvBC,EADuB,gBAEVA,EAASC,OAFC,OAEvBC,EAFuB,OAG7BjB,EAAuBiB,EAAKC,qBAHC,2CAAH,qDAMtBP,EAAkB,uCAAG,kCAAAE,EAAA,sEACFC,MAAM,yEAAD,OAA0EX,IAD7E,cACnBY,EADmB,gBAENA,EAASC,OAFH,OAEnBC,EAFmB,OAGrBE,EAAQ,IAAIC,MACZC,EAAQ,EAEZJ,EAAKK,YAAYC,KAAI,SAAAC,GACnBL,EAAME,GAASG,EAAKC,SACpBJ,GAAgB,KAGlBnB,EAAmBiB,GAXM,4CAAH,qDAclBP,EAAqB,uCAAG,8BAAAC,EAAA,sEACLC,MAAM,oEAAD,OAAqET,IADrE,cACtBU,EADsB,gBAETA,EAASW,OAFA,OAEtBT,EAFsB,OAG5BT,EAAeS,GAHa,2CAAH,qDAgB3B,OACE,yBAAKU,UAAU,OACb,6BACE,4BAAQC,MAAOzB,EAAiB0B,SAbR,SAACC,GAC7B1B,EAAmB0B,EAAMC,OAAOH,OAChCjB,MAYKZ,EAAoBwB,KAAI,SAAAS,GAAQ,OAC/B,4BAAQJ,MAAOI,GAAWA,QAK9B,6BACE,4BAAQJ,MAAO3B,EAAgB,GAAI4B,SAhBf,SAACC,GACzBxB,EAAewB,EAAMC,OAAOH,OAC5BhB,MAeKX,EAAgBsB,KAAI,SAAAC,GAAI,OACvB,4BAAQI,MAAOJ,GAAOA,QAK1B,6BACA,2BAAIjB,MC3EU0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99edc712.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [supportCategoryList, setSupportCategoryList] = useState([]);\n  const [supportItemList, setSupportItemList] = useState([]);\n  const [supportCategory, setSupportCategory] = useState('');\n  const [supportItem, setSupportItem] = useState('');\n  const [itemDetails, setitemDetails] = useState('');\n\n\n  useEffect(()=>{\n    getSupportCategoryList();\n  },[]);\n\n  useEffect(()=>{\n    setSupportCategory(supportCategoryList[0]);\n  },[supportCategoryList]);\n\n  useEffect(()=>{\n    getSupportItemList();\n  },[supportCategory]);\n\n  useEffect(()=>{\n    setSupportItem(supportItemList[0]);\n  },[supportItemList]);\n\n  useEffect(()=>{\n    getSupportItemDetails();\n  },[supportItem]);\n\n  const getSupportCategoryList = async ()=>{\n    const response = await fetch(\"https://therapycare.herokuapp.com/supportcategoryname\");\n    const data = await response.json();\n    setSupportCategoryList(data.SupportCategoryName);\n  };\n\n  const getSupportItemList = async ()=>{\n    const response = await fetch(`https://therapycare.herokuapp.com/supportitemname?supportcategoryname=${supportCategory}`);\n    const data = await response.json();\n    var items = new Array();\n    var index = 0;\n    \n    data.SupportItem.map(item => {\n      items[index] = item.ItemName;\n      index = index + 1;\n    });\n\n    setSupportItemList(items);\n  };\n\n  const getSupportItemDetails = async ()=>{\n    const response = await fetch(`https://therapycare.herokuapp.com/supportitemdetails?supportitem=${supportItem}`);\n    const data = await response.text();\n    setitemDetails(data);\n  }\n\n  const supportCategoryChange = (event) => {\n    setSupportCategory(event.target.value);\n    getSupportItemList();\n  }\n\n  const supportItemChange = (event) => {\n    setSupportItem(event.target.value);\n    getSupportItemDetails();\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <select value={supportCategory} onChange={supportCategoryChange}>\n        {supportCategoryList.map(category =>(\n          <option value={category}>{category}</option>\n        ))}\n        </select>\n      </div>\n      \n      <div>\n        <select value={supportItemList[0]} onChange={supportItemChange}>\n        {supportItemList.map(item =>(\n          <option value={item}>{item}</option>\n        ))}\n        </select>\n      </div>\n      \n      <div>\n      <p>{itemDetails}</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}